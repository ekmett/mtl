# NB: don't set `language: haskell` here

# See also https://github.com/hvr/multi-ghc-travis for more information
env:
 - CABALVER=1.16 GHCVER=7.0.4
 # we have to use CABALVER=1.16 for GHC<7.6 as well, as there's
 # no package for earlier cabal versions in the PPA
 - CABALVER=1.16 GHCVER=7.2.2
 - CABALVER=1.16 GHCVER=7.4.2
 - CABALVER=1.16 GHCVER=7.6.3
 - CABALVER=1.18 GHCVER=7.8.4
 # NOTE: we can't use Cabal 1.20 yet due to
 #  https://github.com/haskell/cabal/issues/1806
 - CABALVER=1.22 GHCVER=7.10.1
 - CABALVER=head GHCVER=head

matrix:
  allow_failures:
   - env: CABALVER=head GHCVER=head

# Note: the distinction between `before_install` and `install` is not
#       important.
before_install:
 - travis_retry sudo add-apt-repository -y ppa:hvr/ghc
 - travis_retry sudo apt-get update
 - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"

install:
 - travis_retry cabal update
 - cabal install --only-dependencies

# Here starts the actual work to be performed for the package under
# test; any command which exits with a non-zero exit code causes the
# build to fail.
script:
 # -v2 provides useful information for debugging
 - cabal configure -v2

 # this builds all libraries and executables
 # (including tests/benchmarks)
 - cabal build

 # tests that a source-distribution can be generated
 - cabal sdist

 # check that the generated source-distribution can be built & installed
 - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
   cd dist/;
   if [ -f "$SRC_TGZ" ]; then
      cabal install --force-reinstalls "$SRC_TGZ";
   else
      echo "expected '$SRC_TGZ' not found";
      exit 1;
   fi

notifications:
  irc:
    channels:
      - "irc.freenode.org#haskell-lens"
    skip_join: true
    template:
      - "\x0313mtl\x03/\x0306%{branch}\x03 \x0314%{commit}\x03 %{build_url} %{message}"
